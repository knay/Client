{% extends "::baseAffichage.html.twig" %}

{% block title_page %}
Articles
{% endblock %}

{% block title %}
ALBA - Article
{% endblock %}

{% block produitBlock %}
menuSelected
{% endblock %}

{% block title_ajout %}
Ajouter/modifier un article
{% endblock %}

{% block stylesheets %}
<link rel="stylesheet" href="{{ asset('bundles/imerirnoyau/css/cssCaisse.css') }}"/> 
<link rel="stylesheet" href="{{ asset('bundles/imerirproduit/css/cssArticle.css') }}"/> 
{% endblock %}

{% block ajout %}
<div id="dialogSaisiCodeBarre" style="display: none" title="Saisie manuelle">
	<p>Veuillez saisir le code barre recherché.<br>
	<label for="saisie_code_barre">Code barre : </label>
	<input type="text" name="saisie_code_barre" id="saisie_code_barre">
	</p>
	<button class="bouton" id="valid_saisie">
		<i class="fa fa-check"></i>Valider la saisie
	</button>
</div>
<div style="display:none;" id="contenneur_inventaire">
	<div id="divBoutonOption">
		<button class="bouton" id="scannerUnAutreArticle">
			<i class="fa fa-refresh"></i>Scanner un autre article
		</button>
		<button class="bouton saisie_manuelle">
			<i class="fa fa-pencil"></i>Faire une saisie manuelle de code barre
		</button>
	</div>
	<form action="{{ path('imerir_produit_article_save') }}" method="post" >
		<p>Veuillez compléter les informations suivantes : </p>
		<table class="tableau_input" >
			<tr>
				<td><label for="code">Code barre : </label></td>
				<td><input type="text" name="code" class="valeurCodeBarre" readonly="readonly" value="{{ codeBarre }}"></td>
			</tr>
			<tr>
				<td><label for="produit">Produit : </label></td> 
				<td>
					<select name="produit" class="selectProduit">
					{% for j in produit %}
						<option>{{ j.p }}</option>
					{% endfor %}
					</select>
				</td>
			</tr>
			<tr>
				<td><label for="prixClient">Prix de vente : </label></td>
	 			<td><input type="number" name="prixClient" min="1" value="1" class="prixClient" step="any"></td>
			</tr>
			<tr>
				<td><label for="prixFournisseur">Prix fournisseur : </label></td>
	 			<td><input type="number" name="prixFournisseur" min="1" value="1" class="prixFournisseur" step="any"></td>
			</tr>
	 		<tr>
	 			<td><label for="caract">Attributs : </label></td>
	 			<td class="caract"></td>
	 		</tr>
	 		<tr id="ligneQuantite" style="visibility: hidden;">
	 			<td>Quantité : </td>
	 			<td><input type="number" name="quantite" value="0"></td>
	 		</tr>
	 		<tr>
	 			<td><button class="bouton" type="submit"><i class="fa fa-check"></i>Enregistrer</button></td>
	 			<td>
		 			<a href="{{ path('imerir_produit_article') }}" class="bouton">
						<i class="fa fa-reply"></i>Annuler
					</a>
				</td>
	 		</tr>
		</table>
	</form>
</div>
<!-- Message s'affichant uniquement au chargement de la page, dès qu'on scan un item on l'enlève -->
<div id="message_accueil">
	<h2>Scanner un article pour commencer</h2>
	Ou<br>
	<button class="bouton saisie_manuelle">
		<i class="fa fa-pencil"></i>Faire une saisie manuelle de code barre
	</button>
</div>

<div id="chargement" style="display: none;">
	<h2><i class="fa fa-pulse fa-spinner"></i>Chargement...</h2>
</div>
{% endblock %}

{% block recherche %}
	<form action="{{ path('imerir_produit_article') }}" method="post">
    	<table>
	    	<tr>
	    		<td><label>Ligne produit : </label></td>
	    		
		        <td>
		        	<select id="select_ligne_produit" name="nomLigneProduit">
		            	<option></option>
		            	{% for i in result_all_ligne_produit %}
		                	<option>{{ i.nom_ligne_produit }}</option>
		            	{% endfor %}
		        	</select>
		        </td>
	        </tr>
	        <tr>
	        	<td><label>Produit : </label></td>
	        	<td><select id="select_produit" name="nomProduit"></select></td>
	        </tr>
        </table>
       	<button type="submit" class="bouton"><i class="fa fa-search"></i>Rechercher</button>
    </form>
{% endblock %}

{% block table %}
	<tr>
		<th>Code barre</th>
		<th>Ligne produit</th>
		<th>Produit</th>
		<th>Attribut(s)</th>
	</tr>
	{% for i in tab_recherche %}
	<tr>
		<td>
			<form method="post" action="{{ path('imerir_produit_article') }}">
				<input type="hidden" value="{{ i.codeBarre }}" name="codeBarre">
			</form>
			{{ i.codeBarre }}
		</td>
		<td>{{ i.ligneProduit }}</td>
		<td>{{ i.produit }}</td>
		<td>
			{% for j in i.valAttribut %}
				{% if loop.last %}
				{{ j }}
				{% else %}
				{{ j }},
				{% endif %}
			{% endfor %}
		</td>
	</tr>
	{% endfor %}
{% endblock %}

{% block javascripts %}
<script>
var tableau = $("#table_code_barre"); //< Le tableau représentant les éléments scanné à la caisse
var isScanne = false;

$("#fieldset_recherche").find(".tableau").find('tr').click(function () {
	$(this).find("form").submit();
});

//Gestion des selects en fonction de la ligne produits selectionne
$( "#select_ligne_produit" ).change(function() {
	$.ajax({
		   url: '{{ path('imerir_ajax_stock_get_produit') }}',
		   data: { nomLigneProduit: $(this).val() },
		   success: function(data) {
			   var objJson = JSON.parse(data); // On parse les datas et on trouve le produit correspondant à l'article dans la liste.
//					alert(objJson);
			   $("#select_produit").html('');
			   $("#select_produit").html('<option></option>');
				for(id_produit in objJson){
//						alert(objJson[id_produit]['produit']);
					 $("#select_produit").html( $("#select_produit").html()+'<option>'+objJson[id_produit]['produit']+'</option>');
				}
			   },
		   type: 'POST'
	});
});

/**
 * Fonction appelé automatique au chargement de la page.
 * Elle permet de vider tout les champs texte qui, sinon, pourrait avoir 
 * des trâces en cas de refresh de la page web.
 */
$(document).ready(function (e) {
	//$('input[type="text"]').val('');
	validerCodeBarre(false);
});

/** 
 * Fonction ouvrant une fenetre de saisie manuelle de code barre
 */
$(".saisie_manuelle").click(function () {
	var dial = $("#dialogSaisiCodeBarre");
	dial.dialog({
	    modal: true,
	    width: "50%",
		height: "300",
		resizable: false,
		draggable: false
	});
});

$("#scannerUnAutreArticle").click(function() {
	$("#chargement").hide();
	$("#message_accueil").show();
	$("#contenneur_inventaire").hide();
});

/**
 * Permet de valider la saisie manuelle de code barre.
 * Une fois que le code barre a bien été saisi par l'utilisateur, on met la valeur de ce qui a été saisie 
 * dans l'input où la douchette va normalement écrire, puis on lance la recherche.
 */
$("#valid_saisie").click(function () {
	var input = $("#saisie_code_barre");
	var valeurSaisie = input.val();
	if (valeurSaisie === "") {
		input.focus();
		return;
	}

	var inputCodeBarre = $(".valeurCodeBarre");
	inputCodeBarre.val(valeurSaisie); // On fait comme si on avait fait avec la douchette, on met dans l'input qui va bien
	
	validerCodeBarre(true); // On fait comme si on avait eu un code barre

	$("#dialogSaisiCodeBarre").dialog("close");
});

/**
 * Fonction clef du scan, permet de detecter lorsque l'on presse une touche,
 * la douchette agissant comme un clavier, cette methode est appelé lors d'un 
 * scan de produit.
 */
$(document).keypress(function(e) {
	if ($("#dialogSaisiCodeBarre").is(":visible") === true) // Si on est sur la dialog on ne prend plus en compte la douchette 
		return true;
	
	// Si l'utilisateur à le curseur sur un champ texte, c'est qu'il veut écrire et ce 
	// n'est plus la douchette qui est maître
	if ($('.prixClient:focus').length || $('.prixFournisseur:focus').length || $('.promo:focus').length || $('.quantite:focus').length) 
		return true;
	
	var input = $(".valeurCodeBarre"); // On récupère l'input dans lequel on va venir écrire le code barre
	var elementfocus = $('input:focus').blur(); // On défocus les input pours pas écrire dessus avec la douchette

	$("#inputSubmit").attr("disabled", true);  // On grise le boutton submit le temps du traitement

	if (isScanne === true) {
		isScanne = false;
		input.val('');
	}

	if (input.val().length == 1) { // Si c'est le premier caractère taper on lance un timeout (pour le temps de lecture d'un code barre)
		setTimeout (validerCodeBarre, 220);
	}

    input.val(input.val()+ String.fromCharCode(e.which));
    return false;
});

/**
 * Permet de récupérer le prix d'un article depuis le serveur SOAP.
 */
function getPrixFromSoap() {
	$.ajax({
		   url: '{{ path('imerir_noyau_ajax_getPrixFromCodeBarre_caisse') }}',
		   data: {
		      codeBarre: $('.valeurCodeBarre').val()
		   },
		   success: function(data) {
			   var montantClient = data.montant_client;
			   var montantFournisseur = data.montant_fournisseur;
			   $('.prixClient').val(montantClient);
			   $('.prixFournisseur').val(montantFournisseur);
		   },
		   error: function () {
			   alert('[AJAX.ART003] Une erreur s\'est produit lors de la récupération des données.');
		   },
		   type: 'POST'
	});	
}

/**
 * Permet de récupèrer un article complet depuis le SOAP.
 */
function getArticleFromSoap() {
	var codeBarre = $(".valeurCodeBarre").val();

	$("#inputSubmit").attr("disabled", true); // Le temps du traitement on grise le bouton submit
	$.ajax({
		   url: '{{ path('imerir_ajax_inventaire_get_article_from_code_barre') }}',
		   data: {
		      codeBarre: codeBarre
		   },
		   success: function(data) {
			   var objJson = JSON.parse(data); // On parse les datas et on trouve le produit correspondant à l'article dans la liste.
			   var nomProduit = $(".selectProduit").children('option');
			   nomProduit.attr("selected", false);
			   nomProduit.first().attr("selected", true);
			   nomProduit.each(function (e) {
				   if ($(this).html() === objJson['nomProduit']) {
					   nomProduit.first().attr("selected", false);
					   $(this).attr("selected", true);
				   }
			   });

			   if (typeof objJson['nomProduit'] == "undefined")
				   $("#ligneQuantite").css("visibility", "visible");
			   else {
				   $("#ligneQuantite").css("visibility", "hidden");
				   $("#ligneQuantite").find("input").val("-1");
			   }

			   valeurCaracteristique = objJson.attributs; // Pour problème de concurences AJAX. Pour passer une variable à la fonction 'onChangeSelect' 

			   $(".selectProduit").trigger('change'); // On simule le fait que l'on veuille changer de produit pour mettre à jour les attributs
		   },
		   error: function () {
			   alert('[AJAX.ART001] Une erreur s\'est produit lors de la récupération des données.');
		   },
		   type: 'POST'
	});
}

$('.selectProduit').change(onChangeSelect); // Lorsqu'on change de produit, il faut mettre à jour les attributs

/**
 * Permet de mettre à jour les attributs lorsque l'on change le produit.
 */
function onChangeSelect() {
	var ligne = $(this).parent().parent(); // On recup le TR
	$("#inputSubmit").attr("disabled", true); // On grise le boutton submit le temps du traitement
	
	$.ajax({
		   url: '{{ path('imerir_ajax_inventaire_get_attribut') }}',
		   data: {
		      nom: $(this).val()
		   },
		   success: function(data) {
			   var objJson = JSON.parse(data); // On parse les data puis on affiche les attributs et les valeurs atribut correctement.
			   var span = $('.caract');
			   var numValAttribut = 0; //< Le nombre de valeur attribut. Utilisé pour envoyé toutes les données en POST sans qu'elles aient le même nom
			   
			   span.html('');
			   
			   objJson.forEach(function (attr) {
				   span.append('<label for="caract_'+numValAttribut+'">'+attr.nom+' : </label> ');
				   span.append('<select name="caract_'+numValAttribut+'"></select><br/>');
				   var select = span.children('select').last();
				   for (valAttr in attr.valeurs) {
					   if (valeurCaracteristique !== null && valeurCaracteristique[attr.nom] === attr.valeurs[valAttr])
					   	  select.append('<option selected value="'+attr.nom+'_'+attr.valeurs[valAttr]+'">'+attr.valeurs[valAttr]+'</option>');
					   else 
						  select.append('<option value="'+attr.nom+'_'+attr.valeurs[valAttr]+'">'+attr.valeurs[valAttr]+'</option>');
				   }
				   
				   if (span.children('select').html() == '') {
					   span.children('select').remove();
					   span.last().html('AUCUNE CARACTÉRISTIQUE');
				   }
				   
				   numValAttribut++;
			   });

			   valeurCaracteristique = null;
			   $("#inputSubmit").attr("disabled", false);
			   $("#contenneur_inventaire").show();
			   $("#chargement").hide();
		   },
		   error: function () {
			   alert('[AJAX.ART002] Une erreur s\'est produit lors de la récupération des données.');
		   },
		   type: 'POST'
	});
}

/** 
 * Fonction appelée lorsqu'un code barre a été valider.
 * Va rechercher toutes les informations de l'article scanné depuis le serveur SOAP.
 *
 * @param saisieManuelle Précise s'il s'agit d'une saisie manuelle ou non. Si c'est une
 *                       saisie manuelle on ne tient pas compte de la longueur du code barre.
 */
function validerCodeBarre(saisieManuelle) {
	var input = $(".valeurCodeBarre"); // On récupère l'input dans lequel on va venir écrire le code barre
	
	if (saisieManuelle !== true && input.val().length < 10) {
		input.val('');
		isScanne = false;
		return true;
	}

	$("#chargement").show();
	$("#message_accueil").hide();
	$("#contenneur_inventaire").hide();

	$("#inputSubmit").attr("disabled", false); // On remet en service le boutton submit
	getArticleFromSoap(); // On récupère l'article depuis le SOAP pour afficher ces caractéristiques
	getPrixFromSoap(); // On récupère le prix de l'article

	isScanne = true;
}

$("#inputSubmit").attr("disabled", false); // Par défaut le bouton submit et accessible


</script>
{% endblock %}

