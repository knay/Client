{% extends "::baseAffichage.html.twig" %}

{% block title_ajout %}Faire un premier inventaire{% endblock %}

{% block title_page %}Inventaire complet{% endblock %}

{% block title %}ALBA - Iventaire complet{% endblock %}

{% block stylesheets %}
    <link rel="stylesheet" href="{{ asset('bundles/imerirnoyau/css/cssCaisse.css') }}"/> 
{% endblock %}

{% block aide %}
<p>
Cette page vous permet de faire un inventaire complet de vos produits.<br>
Un inventaire complet vous permet de saisir directement les prix des articles (prix fournisseur et prix de vente).<br>
Lorsque vous faites un inventaire, il faut suivre les étapes suivantes :
</p>
<ul>
	<li>Scanner l'article ou saisir le code barre manuellement</li>
	<li>
		Choisir le produit concerné par l'article. Si vous ne l'avez pas enregistré au préalable, vous pouvez le faire
		en cliquand sur le bouton "plus" de la colonne "Produit".
	</li>
	<li>
		Choisir les caractéristiques de cet article. Vous pouvez modifier les attributs en cliquant sur le crayon 
		dans la colonne "Attributs".
	</li>
	<li>
		Préciser le nombre d'article que vous avez avec les boutons "plus" et "moins" de la colonne quantité. 
		Vous pouvez aussi scanné l'article plusieurs fois pour augmenter la quantité.
	</li>
	<li>Saisir le prix fournisseur.</li>
	<li>Saisir le prix de vente.</li>
</ul>
<p>
	Vous pouvez à tout moment faire une saisie manuelle de code barre en cliquant sur le bouton en haut de votre écran.
</p>
{% endblock %}

{% block ajout %}
<div id="dialog" style="display: none"></div>

<div id="dialogSaisiCodeBarre" style="display: none" title="Saisie manuelle">
	<p>Veuillez saisir le code barre recherché.<br>
	<label for="saisie_code_barre">Code barre : </label>
	<input type="text" name="saisie_code_barre" id="saisie_code_barre">
	</p>
	<button type="button" class="bouton" id="valid_saisie">
		<i class="fa fa-check"></i>Valider la saisie
	</button>
</div>

<form action="{{ path('imerir_stock_inventaire_dev_save') }}" method="post" id="form_inventaire">
	<div id="contenneur_inventaire" style="display:none;">
		<div id="divBoutonOption">
			<button type="button" class="bouton saisie_manuelle">
				<i class="fa fa-pencil"></i>Faire une saisie manuelle de code barre
			</button>
		</div>
		<table id="table_code_barre" class="tableau">
			<tr>
				<th></th>
				<th>Produit</th>
				<th>Code barre</th>
				<th>Quantité</th>
				<th>Prix client</th>
				<th>Prix fournisseur</th>
				<th>Caractèristiques</th>
{# 				petite bite tu as oublié la règle d'or !! #}
			</tr>
			<tr style="display: none">
				<td><i class="fa fa-minus-square supprimer"></i></td>
				<td>
					<select name="produit_0" class="selectProduit">
						{% for j in produit %}
							<option value="{{ j.p }}">{{ j.lp }} - {{ j.p }}</option>
						{% endfor %}
					</select>
					<i class="fa fa-plus-square ajout ajoutProduit"></i>
				</td>
				<td><input type="text" name="code_0" class="valeurCodeBarre" readonly="readonly"></td>
				<td>
					<input type="number" name="quantite_0" min="1" value="1" class="quantite">
					<i class="fa fa-minus-square moinsQuantite" title="-1 en quantité"></i>
					<i class="fa fa-plus-square plusQuantite" title="+1 en quantité"></i>
				</td>
				<td><input type="number" name="prixClient_0" class="prixClient prix" step="any"> €</td>
				<td><input type="number" name="prixFournisseur_0" class="prixFournisseur prix" step="any"> €</td>
				<td>
					{% set nbCarac = 0 %}
					
					{# On affiche tous les attributs dans des selects, et toutes les valeurs 
					   liées à cet attribut dans les options de ce select #}
					{% for j in attributs %} 
						<label for="caract_0_{{ nbCarac }}">{{ j.nom }} : </label>
						<select name="caract_0_{{ nbCarac }}" class="valAttribut">
						{% for i in j.valeurs %}
							<option value="{{ j.nom }}_{{ i }}">{{ i }}</option>
						{% endfor %}
						</select>
						{% set nbCarac = nbCarac + 1 %}
					{% endfor %}
				</td>
			</tr>
		</table>
		<div class="alignDroite">
			<button type="submit" class="bouton" id="btnCaisse"><i class="fa fa-check"></i>Valider l'inventaire</button>
		</div>
	</div>
	
	<!-- Message s'affichant uniquement au chargement de la page, dès qu'on scan un item on l'enlève -->
	<div id="message_accueil">
		<h2>Scanner un article pour commencer</h2>
		Ou<br>
		<button type="button" class="bouton saisie_manuelle">
			<i class="fa fa-pencil"></i>Faire une saisie manuelle de code barre
		</button>
	</div>
	
	<div id="chargement" style="display: none;">
		<h2><i class="fa fa-pulse fa-spinner"></i>Chargement...</h2>
	</div>
</form>
{% endblock %}
    
{% block table %}
<tr><th>Stock</th></tr>
<tr><td>ici on affichera le stock actuel</td></tr>
{% endblock %}

{% block javascripts %}
<script>
var nbCodeBarre = 0;  //< Le nombre d'article scanné. Utilisé pour envoyé toutes les données en POST sans qu'elles aient le même nom
var tableau = $("#table_code_barre"); //< Le tableau représentant les éléments scanné à la caisse
var valeurCaracteristique = ''; //< Cette variable est utilisé pour des problèmes de concurences avec AJAX... Elle permet de stocké des donnée le temps qu'une requete soit passée

/**
 * Fonction réagissant lors du clic sur le bouton - à côté de la quantité de produit.
 * Diminue la quantité de 1 en faisait attention de ne pas descendre en dessous de 0.
 */
function moinsQuantite() {
	var input = $(this).parent().find(".quantite");
	var qt = parseInt(input.val()) - 1;
	if(qt < 0)
		qt = 0;

	input.val(qt);
	calculerPrixTotal();
}

/**
 * FOnction réagissant lors du clic sur le bouton + à côté de la quantité produit.
 * Augmente la quantité produit de 1.
 */
function plusQuantite() {
	var input = $(this).parent().find(".quantite");
	var qt = parseInt(input.val()) + 1;

	input.val(qt);
	calculerPrixTotal();
}

/** 
 * Fonction ouvrant une fenetre de saisie manuelle de code barre
 */
$(".saisie_manuelle").click(function () {
	var dial = $("#dialogSaisiCodeBarre");
	dial.dialog({
	    modal: true,
	    width: "50%",
		height: "300",
		resizable: false,
		draggable: false
	});
	dial.find("input").val('');
});

/**
 * Permet de réagir lorsque l'on valide l'inventaire.
 */
$("#form_inventaire").submit(function (event) {
	var message = "Confirmer l'inventaire ?"; // Le message de base du message de confirmation

	// On affiche le message et on valide ou pas
	if (confirm(message) === true) 
		return true;
	else {
		event.preventDefault(); // On empeche le comportement par défaut le temps de vérifier
		return false;
	}
});

/**
 * Permet de valider la saisie manuelle de code barre.
 * Une fois que le code barre a bien été saisi par l'utilisateur, on met la valeur de ce qui a été saisie 
 * dans l'input où la douchette va normalement écrire, puis on lance la recherche.
 */
$("#valid_saisie").click(function () {
	var input = $("#saisie_code_barre");
	var valeurSaisie = input.val();
	if (valeurSaisie === "") {
		input.focus();
		return;
	}

	var inputCodeBarre = $(".valeurCodeBarre").last();
	inputCodeBarre.val(valeurSaisie); // On fait comme si on avait fait avec la douchette, on met dans l'input qui va bien
	
	validerCodeBarre(true); // On fait comme si on avait eu un code barre

	$("#dialogSaisiCodeBarre").dialog("close");
});

/**
 * Fonction permettant d'ajouter un produit. 
 */
function ajoutProduit() {
	var ligne = $(this).parent().parent(); // La ligne sur laquelle on a cliqué

	$("#dialog").attr("title", "Ajouter un nouveau produit");
	
	$("#contenneur_inventaire").hide();
	$("#chargement").show();
	   
    $("#dialog").load('{{ path('imerir_produit_creation_produit') }}', function () {
    	var dial = $("#dialog");
    	$("#dialog").dialog({
            modal: true,
            width: "90%",
        	height: "400",
        	resizable: false,
        	draggable: false,
        	close: function() {
        		$("#contenneur_inventaire").show();
			   	$("#chargement").hide();
            }
        });
        
        dial.find("#div_menu").remove();
        dial.find("#header").remove();
        dial.find("#title_page").remove();
        dial.find("#fieldset_recherche").remove();
        dial.find("a").remove();
        dial.find("#affichage").css("left", "0");
        dial.find("#affichage").css("width", "100%");

        $( "#menu" ).children( "li" ).unbind("click");
        
        /**
         * Fonction permettant de traiter le clic sur le bouton submit de la fenetre, si on submit, on envoie pas 
         * le formulaire normalement, on le passe par AJAX.
         */
        dial.find('form').submit (function (event){ 
        	event.preventDefault();
        	
            var valProduit = dial.find('input[name=nomProduit]').val();
            var valLigneProduit = dial.find('select[name=nomLigneProduit]').val();

            $("#dialog").html('<div id="chargement">'
            		+'<h2><i class="fa fa-pulse fa-spinner"></i>Chargement...</h2>'
            		+'</div>');
        	$.ajax({
     		   url: '{{ path('imerir_produit_validation_creation_produit') }}',
     		   data: {
     			  nomProduit: valProduit,
     			  nomLigneProduit: valLigneProduit
     		   },
     		   success: function(data) {
     			  var select = ligne.find('.selectProduit');
     			  select.html(select.html()+'<option value="'+valProduit+'" selected>'+valLigneProduit+' - '+valProduit+'</option>');
     			  $("#dialog").dialog("close");
     			  ligne.effect( "highlight", {}, "3000" );
     			  select.trigger('change');
     			  $('.ajoutProduit').unbind('click');
     			  $('.modifierAttribut').unbind('click');
     			  $('.ajoutProduit').unbind('click');
     			  $('.modifierAttribut').unbind('click');

     			  $("#contenneur_inventaire").show();
  			   	  $("#chargement").hide();
     		   },
     		   type: 'POST'
     		});
     		return false;
        });
    });
}

/**
 * Fonction permettant de modifier les attributs. 
 */
function modifierAttribut() {
	var ligne = $(this).parent().parent().parent(); // La ligne sur laquelle on a cliqué
	var idAttr = $(this).parent().find('.id_attribut').val();
	var data = {id : idAttr};
	if (idAttr === "0")
		data = {};

	$("#dialog").attr("title", "Modifier un attribut");

	$("#contenneur_inventaire").hide();
	$("#chargement").show();

    $("#dialog").load('{{ path('imerir_produit_modif_attributs') }}', data, function () {
        var dial = $("#dialog");
        
        dial.dialog({
            modal: true,
            width: "90%",
        	height: "450",
        	resizable: false,
        	draggable: false,
        	close: function() {
        		$("#contenneur_inventaire").show();
			   	$("#chargement").hide();
            }
        });
        
        dial.find("#div_menu").remove();
        dial.find("#header").remove();
        dial.find("#title_page").remove();
        dial.find("#fieldset_recherche").remove();
        dial.find("a").remove();
        dial.find("#affichage").css("left", "0");
        dial.find("#affichage").css("width", "100%");

        $( "#menu" ).children( "li" ).unbind("click");
        
        /**
         * Fonction permettant de traiter le clic sur le bouton submit de la fenetre, si on submit, on envoie pas 
         * le formulaire normalement, on le passe par AJAX.
         */
        dial.find('form').submit (function (event){ 
        	event.preventDefault();
        	
            var valProduit = dial.find('input[name=nomProduit]').val();
            var valLigneProduit = dial.find('select[name=nomLigneProduit]').val();

            $("#dialog").html('<div id="chargement">'
            		+'<h2><i class="fa fa-pulse fa-spinner"></i>Chargement...</h2>'
            		+'</div>');
            var datas = $(this).serialize();
        	$.ajax({
     		   url: '{{ path('imerir_produit_save_attributs') }}',
     		   data: datas,
     		   success: function(data) {
     			  var select = ligne.find('.selectProduit');
     			  dial.dialog("close");
     			  ligne.effect( "highlight", {}, "3000" );
     			  select.trigger('change');
     			  $('.ajoutProduit').unbind('click');
     			  $('.modifierAttribut').unbind('click');
     			  $('.ajoutProduit').unbind('click');
     			  $('.modifierAttribut').unbind('click');
     			  $("#contenneur_inventaire").show();
  			      $("#chargement").hide();
     		   },
     		   type: 'POST'
     		});
     		return false;
        });
    });
}

/**
 * Permet d'effacer une ligne d'inventaire en cas d'erreur de l'utilisateur.
 * Cette fonction est appéelé lorsque l'on clic sur le bouton moins.
 */
function supprimerLigne () {
	if (confirm("Voulez-vous vraiment supprimer cet article ?") === true) {
		$(this).parent().parent().remove();
		if (tableau.children("tbody").children("tr").length == 2) {
			$("#contenneur_inventaire").hide();
			$("#message_accueil").show();
		}
	}
}

$('.supprimer').click(supprimerLigne); // On bind le clic sur bouton - avec la fonction de suppression
$('.ajoutProduit').click(ajoutProduit); // On bind le clic sur bouton - avec la fonction de suppression
$('.modifierAttribut').click(modifierAttribut); // On bind le clic sur bouton modifer avec la modification d'attibut
$('.moinsQuantite').click(moinsQuantite); // On bind le clic sur le bouton moins de la quantite avec la fonction
$('.plusQuantite').click(plusQuantite); // On bind le clic sur le bouton plus de la quantite avec la fonction

/**
 * Fonction appelé automatique au chargement de la page.
 * Elle permet de vider tout les champs texte qui, sinon, pourrait avoir 
 * des trâces en cas de refresh de la page web.
 */
$(document).ready(function (e) {
	$('input[type="text"]').val('');
	$("#fieldset_recherche").hide();
});

/**
 * Fonction clef du scan, permet de detecter lorsque l'on presse une touche,
 * la douchette agissant comme un clavier, cette methode est appelé lors d'un 
 * scan de produit.
 *
 * TODO : permettre d'écrire dans un champ type int.... la base quoi..
 * TODO : s'inspiré de la caisse pour faire un truc plus propre au niveau de l'affichage d'un champs qui sera vide au depart..
 */
$(document).keypress(function(e) {
	if ($("#dialog").is(":visible") === true || $("#dialogSaisiCodeBarre").is(":visible") === true) // Si on est sur la dialog on ne prend plus en compte la douchette 
		return true;
	
	// Si l'utilisateur à le curseur sur un champ texte, c'est qu'il veut écrire et ce 
	// n'est plus la douchette qui est maître
	if ($('.prix:focus').length || $('.promo:focus').length || $('.quantite:focus').length) {
		if (e.keyCode === 13)
			return false; 
		return true;
	}
	
	var input = $(".valeurCodeBarre").last(); // On récupère l'input dans lequel on va venir écrire le code barre
	var elementfocus = $('input:focus').blur(); // On défocus les input pours pas écrire dessus avec la douchette

	$("#inputSubmit").attr("disabled", true);  // On grise le boutton submit le temps du traitement

	if (input.val().length == 1) { // Si c'est le premier caractère taper on lance un timeout (pour le temps de lecture d'un code barre)
		setTimeout (validerCodeBarre, 220);
	}

    input.val(input.val()+ String.fromCharCode(e.which));
    return false;
});

/**
 * Permet de récupèrer un article complet depuis le SOAP.
 * @param ligne La ligne du tableau dont on veut les informations sur l'article.
 */
function getArticleFromSoap(ligne) {
	var cellule = ligne.children('td');
	var codeBarre = cellule.children(".valeurCodeBarre").val();

	$("#inputSubmit").attr("disabled", true); // Le temps du traitement on grise le bouton submit
	$.ajax({
		   url: '{{ path('imerir_ajax_inventaire_get_article_from_code_barre') }}',
		   data: {
		      codeBarre: codeBarre
		   },
		   success: function(data) {
			   var objJson = JSON.parse(data); // On parse les datas et on trouve le produit correspondant à l'article dans la liste.
			   var nomProduit = cellule.children(".selectProduit").children('option');
			   nomProduit.each(function (e) {
				   if ($(this).html().split("-")[1].trim() === objJson['nomProduit'])
					   $(this).attr("selected", true);
			   });

			   valeurCaracteristique = objJson.attributs; // Pour problème de concurences AJAX. Pour passer une variable à la fonction 'onChangeSelect' 

			   cellule.children(".selectProduit").trigger('change'); // On simule le fait que l'on veuille changer de produit pour mettre à jour les attributs
		   },
		   error : function(data) {
			    alert(data);
		   },
		   type: 'POST'
	});
}

$('.selectProduit').change(onChangeSelect); // Lorsqu'on change de produit, il faut mettre à jour les attributs

/**
 * Permet de mettre à jour les attributs lorsque l'on change le produit.
 */
function onChangeSelect() {
	var ligne = $(this).parent().parent(); // On recup le TR
	$("#inputSubmit").attr("disabled", true); // On grise le boutton submit le temps du traitement
	
	$.ajax({
		   url: '{{ path('imerir_ajax_inventaire_get_attribut') }}',
		   data: {
		      nom: $(this).val().split("-")[1].trim()
		   },
		   success: function(data) {
			   var objJson = JSON.parse(data); // On parse les data puis on affiche les attributs et les valeurs atribut correctement.
			   var celulle = ligne.children('td').last();
			   var numLigne = ligne.children('td').children('input').first().attr('name').split('_')[1];
			   var numValAttribut = 0; //< Le nombre de valeur attribut. Utilisé pour envoyé toutes les données en POST sans qu'elles aient le même nom
			   
			   celulle.html('');
			   
			   objJson.forEach(function (attr) {
				   celulle.append('<label for="caract_'+numLigne+'_'+numValAttribut+'">'+attr.nom+' : </label> ');
				   celulle.append('<div><select name="caract_'+numLigne+'_'+numValAttribut+'"></select><i class="fa fa-pencil-square modifier modifierAttribut"></i><input type="hidden" class="id_attribut" name="id" value="'+attr.id+'"></div><br/>');
				   var select = celulle.find('select').last();
				   for (valAttr in attr.valeurs) {
					   if (valeurCaracteristique !== null && valeurCaracteristique[attr.nom] === attr.valeurs[valAttr])
					   	  select.append('<option selected value="'+attr.nom+'_'+attr.valeurs[valAttr]+'">'+attr.valeurs[valAttr]+'</option>');
					   else 
						  select.append('<option value="'+attr.nom+'_'+attr.valeurs[valAttr]+'">'+attr.valeurs[valAttr]+'</option>');
				   }

				   celulle.append('<input type="hidden" class="id_attribut" name="id" value="'+attr.id+'">');
				   
				   if (celulle.children('select').html() == '') {
					   celulle.children('select').remove();
					   celulle.last().html('AUCUNE CARACTÉRISTIQUE');
				   }
				   
				   numValAttribut++;
			   });

			   $('.ajoutProduit').unbind('click');
			   $('.ajoutProduit').click(ajoutProduit); // On bind le clic sur bouton - avec la fonction de suppression
			   $('.modifierAttribut').unbind('click');
			   $('.modifierAttribut').click(modifierAttribut); // On bind le clic sur bouton modifer avec la modification d'attibut
			   
			   $("#contenneur_inventaire").show();
			   $("#chargement").hide();
			   ligne.effect( "highlight", {}, 3000 );
			   
			   valeurCaracteristique = null;
			   $("#inputSubmit").attr("disabled", false);
		   },
		   type: 'POST'
	});
}

function validerCodeBarre(saisieManuelle) {
	var input = $(".valeurCodeBarre").last(); // On récupère l'input dans lequel on va venir écrire le code barre
	var ligne = tableau.find("tr").last().clone(); // On prépare le clone de la ligne pour l'ajouter au tableau
	var cellule = ligne.children('td');
	var nbCaract = 0;
	var existeDeja = false; // Permettra de savoir si on a déjà scané cet article ou non
	var ligneCur = tableau.find("tr").last(); // On récupère la ligne de tableau sur laquelle on va travailler
	var lignes = tableau.find("tr");

	if (saisieManuelle !== true && input.val().length < 10) {
		input.val('');
		return true;
	}

	$("#chargement").show();
	$("#contenneur_inventaire").hide();
	$("#message_accueil").hide();


	lignes.each(function (e) { // On regarde dans toutes les lignes pour savoir si l'article à déjà été scanné
		if (e === lignes.length - 1) // si c'est la ligne en cours, aucun interet on arrete la boucle
			return; 

		// Si c'est la même valeur de code barre c'est que l'article à déjà été scanné, on incrémente la quantité
		if ($(this).find(".valeurCodeBarre").val() == ligneCur.find('.valeurCodeBarre').val()) {
			existeDeja = true;
			var qt = parseInt($(this).children('td').children(".quantite").val())+1;
			$(this).children('td').children(".quantite").val(""+qt);
			ligneCur.find(".valeurCodeBarre").val('');
			$("#chargement_caisse").children("span").hide();
		}
	});

	if (existeDeja === false) {
		nbCodeBarre++;
		
		cellule.children(".selectProduit").attr('name', 'produit_'+nbCodeBarre);
		cellule.children(".quantite").attr('name', 'quantite_'+nbCodeBarre);
		cellule.children(".valeurCodeBarre").attr('name', 'code_'+nbCodeBarre);
		cellule.children(".prixClient").attr('name', 'prixClient_'+nbCodeBarre);
		cellule.children(".prixFournisseur").attr('name', 'prixFournisseur_'+nbCodeBarre);
		cellule.children(".valAttribut").each(function (e) {
			$(this).attr('name', 'caract_'+nbCodeBarre+'_'+nbCaract);
			nbCaract++;
		});
		cellule.children(".valeurCodeBarre").val('');
		tableau.append(ligne);
	
		$('.supprimer').unbind('click');
		$('.supprimer').click(supprimerLigne);
		$('.selectProduit').unbind('change');
		$('.selectProduit').change(onChangeSelect);
		$('.moinsQuantite').unbind("click");
		$('.plusQuantite').unbind("click");
		$('.moinsQuantite').click(moinsQuantite); // On bind le clic sur le bouton moins de la quantite avec la fonction
		$('.plusQuantite').click(plusQuantite); // On bind le clic sur le bouton plus de la quantite avec la fonction
	
		ligne.hide(); // On le cache, ça sera la prochaine ligne qui sera afficher au prochain scan
		ligneCur.show(); // On affiche l'article qu'on vient de scanner

		$("#inputSubmit").attr("disabled", false); // On remet en service le boutton submit
		getArticleFromSoap(input.parent().parent()); // On récupère l'article depuis le SOAP pour afficher ces caractéristiques
	}
	else {
		 $("#contenneur_inventaire").show();
		 $("#chargement").hide();
	}
}

$("#inputSubmit").attr("disabled", false); // Par défaut le bouton submit et accessible
</script>
{% endblock %}